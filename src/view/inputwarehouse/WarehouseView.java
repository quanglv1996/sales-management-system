/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project1.view.inputwarehouse;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import project1.core.cost.Cost;
import project1.core.connection.CreateConnectionDB;
import project1.core.employee.EmployeeWarehouse;
import project1.core.other.SetDataToObject;
import project1.core.product.Book;
import project1.core.product.Movie;
import project1.core.product.Music;
import project1.view.login.LoginView;
import project1.view.sell.SellProductsView;

/**
 *
 * @author lequangbkhn
 */
public class WarehouseView extends javax.swing.JFrame {

    /**
     * Creates new form InputWarehouse
     */
    public WarehouseView() {
       
    }
    
    public void init() {
        setResizable(false);
        initComponents();
        setVisible(true);
        tableBook("");
    }
//Lay thong tin nhan vien tu Frame truoc----------------------------------------
    private String username;
    private String Name;
    private int typeUser;
    
    public int getTypeUser() {
        return typeUser;
    }
    
    public void setTypeUser(int typeUser) {
        this.typeUser = typeUser;
    }
    
    public String getUsername() {
        return username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    
    @Override
    public String getName() {
        return Name;
    }
    
    @Override
    public void setName(String Name) {
        this.Name = Name;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        sachBt = new javax.swing.JButton();
        diaPhimBt = new javax.swing.JButton();
        diaNhacBt = new javax.swing.JButton();
        dangXuatBt = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableProduct = new javax.swing.JTable();
        timKiemTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        choseComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        chiPhiBt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/image/home.png"))); // NOI18N
        jLabel2.setText("NHẬP KHO");

        sachBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/image/archive.png"))); // NOI18N
        sachBt.setText("Sách");
        sachBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sachBtActionPerformed(evt);
            }
        });

        diaPhimBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/image/movie_track_add.png"))); // NOI18N
        diaPhimBt.setText("Phim");
        diaPhimBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diaPhimBtActionPerformed(evt);
            }
        });

        diaNhacBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/image/sound.png"))); // NOI18N
        diaNhacBt.setText("Nhạc");
        diaNhacBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diaNhacBtActionPerformed(evt);
            }
        });

        dangXuatBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/image/back_1.png"))); // NOI18N
        dangXuatBt.setText("Đăng xuất");
        dangXuatBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dangXuatBtActionPerformed(evt);
            }
        });

        TableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "Ca sĩ", "Thể loại", "NSX", "Giá nhập", "Giá bán", "SL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TableProduct);

        timKiemTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                timKiemTFKeyReleased(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/image/search16x16 .png"))); // NOI18N
        jLabel1.setText("Tìm kiếm");

        choseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sách", "Phim", "Nhạc", "Chi Phí" }));
        choseComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choseComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Thêm sản phẩm ");

        jLabel4.setText("Nhân viên nhập kho :");

        jLabel5.setText(getName());

        chiPhiBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/image/blog_post.png"))); // NOI18N
        chiPhiBt.setText("C.Phí");
        chiPhiBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chiPhiBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(212, 212, 212)
                        .addComponent(dangXuatBt, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(choseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(timKiemTF, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sachBt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(diaPhimBt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(diaNhacBt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chiPhiBt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dangXuatBt)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timKiemTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(choseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diaPhimBt)
                    .addComponent(sachBt)
                    .addComponent(diaNhacBt)
                    .addComponent(jLabel3)
                    .addComponent(chiPhiBt))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String[] dataRow(Book book) {
        String[] rows = {
            book.getMaSanPham(),
            book.getTenSanPham(),
            book.getTacGia(),
            book.getTheLoai(),
            book.getNXB(),
            String.valueOf(book.getGiaNhap()),
            String.valueOf(book.getGiaBan()),
            String.valueOf(book.getSoLuong())
        };
        return rows;
    }
    
    public String[] dataRow(Movie movie) {
        String[] rows = {
            movie.getMaSanPham(),
            movie.getTenSanPham(),
            movie.getDaoDien(),
            movie.getTheLoai(),
            movie.getNSX(),
            String.valueOf(movie.getGiaNhap()),
            String.valueOf(movie.getGiaBan()),
            String.valueOf(movie.getSoLuong())
        };
        return rows;
    }
    
    public String[] dataRow(Music music) {
        String[] rows = {
            music.getMaSanPham(),
            music.getTenSanPham(),
            music.getCaSi(),
            music.getTheLoai(),
            music.getNSX(),
            String.valueOf(music.getGiaNhap()),
            String.valueOf(music.getGiaBan()),
            String.valueOf(music.getSoLuong())
        };
        return rows;
    }
    
    public String[] dataRow(Cost chiPhi) {
        String[] rows = {
            chiPhi.getMaChiPhi(),
            chiPhi.getTen(),
            chiPhi.getLoaiChiPhi(),
            chiPhi.getNgayPhatSinh(),
            String.valueOf(chiPhi.getSoTien()),
            chiPhi.getGhiChu()
        };
        return rows;
    }
    
    public void tableBook(String getText) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(colsNameBook);
        TableProduct.setModel(tableModel);
        List<Book> list = new ArrayList();
        String query = "select * from book where MaSanPham like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or TheLoai like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or TenSanPham like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or TacGia like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or NXB like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or GiaNhap like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or GiaBan like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or SoLuong like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%'";
        ResultSet rs = con.select(query);
        try {
            while (rs.next()) {
                Book book = new Book();
                book.setGiaBan(rs.getInt("GiaBan"));
                book.setGiaNhap(rs.getInt("GiaNhap"));
                book.setMaSanPham(rs.getString("MaSanPham"));
                book.setNXB(rs.getString("NXB"));
                book.setSoLuong(rs.getInt("SoLuong"));
                book.setTacGia(rs.getString("TacGia"));
                book.setTenSanPham(rs.getString("TenSanPham"));
                book.setTheLoai(rs.getString("TheLoai"));
                list.add(book);
            }
        } catch (SQLException ex) {
            ex.getStackTrace();
        }
        
        for (int i = 0; i < list.size(); i++) {
            Book book = new Book();
            book = list.get(i);
            String[] rowData = dataRow(book);
            tableModel.addRow(rowData);
        }
    }
    
    public void tableMovie(String getText) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(colsNameMovie);
        TableProduct.setModel(tableModel);
        List<Movie> list = new ArrayList();
        String query = "select * from movie where MaSanPham like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or TheLoai like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or TenSanPham like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or DaoDien like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or NSX like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or GiaNhap like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or GiaBan like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or SoLuong like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%'";
        ResultSet rs = con.select(query);
        try {
            while (rs.next()) {
                Movie movie = new Movie();
                movie.setGiaBan(rs.getInt("GiaBan"));
                movie.setGiaNhap(rs.getInt("GiaNhap"));
                movie.setMaSanPham(rs.getString("MaSanPham"));
                movie.setNSX(rs.getString("NSX"));
                movie.setSoLuong(rs.getInt("SoLuong"));
                movie.setDaoDien(rs.getString("DaoDien"));
                movie.setTenSanPham(rs.getString("TenSanPham"));
                movie.setTheLoai(rs.getString("TheLoai"));
                list.add(movie);
            }
        } catch (SQLException ex) {
            ex.getStackTrace();
        }
        for (int i = 0; i < list.size(); i++) {
            Movie movie = new Movie();
            movie = list.get(i);
            String[] rowData = dataRow(movie);
            tableModel.addRow(rowData);
        }
    }
    
    public void tableMusic(String getText) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(colsNameMusic);
        TableProduct.setModel(tableModel);
        List<Music> list = new ArrayList();
        String query = "select * from music where MaSanPham like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or TheLoai like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or TenSanPham like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or CaSi like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or NSX like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or GiaNhap like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or GiaBan like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or SoLuong like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%'";
        ResultSet rs = con.select(query);
        try {
            while (rs.next()) {
                Music music = new Music();
                music.setGiaBan(rs.getInt("GiaBan"));
                music.setGiaNhap(rs.getInt("GiaNhap"));
                music.setMaSanPham(rs.getString("MaSanPham"));
                music.setNSX(rs.getString("NSX"));
                music.setSoLuong(rs.getInt("SoLuong"));
                music.setCaSi(rs.getString("CaSi"));
                music.setTenSanPham(rs.getString("TenSanPham"));
                music.setTheLoai(rs.getString("TheLoai"));
                list.add(music);
            }
        } catch (SQLException ex) {
            ex.getStackTrace();
        }
        
        for (int i = 0; i < list.size(); i++) {
            Music music = new Music();
            music = list.get(i);
            String[] rowData = dataRow(music);
            tableModel.addRow(rowData);
        }
    }
    
    public void tableChiPhi(String getText) {
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(colsNameChiPhi);
        TableProduct.setModel(tableModel);
        List<Cost> list = new ArrayList();
        String query = "select * from chi_phi where MaChiPhi like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or TenChiPhi like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or SoTien like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or LoaiChiPhi like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or GhiChu like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%' or NgayPhatSinh like '"
                + getText + "%%%%%%%%%%%%%%%%%%%%%%%%%%%'";
        ResultSet rs = con.select(query);
       
        try {
            while (rs.next()) {
                Cost chiPhi = new Cost();
                chiPhi.setTen(rs.getString("TenChiPhi"));
                chiPhi.setGhiChu(rs.getString("GhiChu"));
                chiPhi.setLoaiChiPhi(rs.getString("LoaiChiPhi"));
                chiPhi.setMaChiPhi(rs.getString("MaChiPhi"));
                chiPhi.setNgayPhatSinh(rs.getString("NgayPhatSinh"));
                chiPhi.setSoTien(rs.getInt("SoTien"));
                chiPhi.setType(Cost.TYPE_CP);
                list.add(chiPhi);
            }
        } catch (SQLException ex) {
            ex.getStackTrace();
        }
        
        for (int i = 0; i < list.size(); i++) {
            Cost chiPhi;
            chiPhi = list.get(i);
            String[] rowData = dataRow(chiPhi);
            tableModel.addRow(rowData);
        }
    }
    
    public void timKiem() {
        String getText = timKiemTF.getText();
        if (choseComboBox.getSelectedIndex() == 0) {
            tableBook(getText);
        } else if (choseComboBox.getSelectedIndex() == 1) {
            tableMovie(getText);
        } else if (choseComboBox.getSelectedIndex() == 2) {
            tableMusic(getText);
        } else {
            tableChiPhi(getText);
        }
    }
    private void sachBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sachBtActionPerformed
        // TODO add your handling code here:
        InputBookView book = new InputBookView();
        
        book.setName(getName());
        book.setUsername(getUsername());
        book.setTypeUser(getTypeUser());
        
        book.init();
        this.dispose();
    }//GEN-LAST:event_sachBtActionPerformed

    private void diaPhimBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diaPhimBtActionPerformed
        // TODO add your handling code here:
        InputMovieCDView movie = new InputMovieCDView();
        
        movie.setName(getName());
        movie.setUsername(getUsername());
        movie.setTypeUser(getTypeUser());
        
        movie.init();
        this.dispose();
    }//GEN-LAST:event_diaPhimBtActionPerformed

    private void diaNhacBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diaNhacBtActionPerformed
        // TODO add your handling code here:
        InputMusicCDView music = new InputMusicCDView();
        
        music.setName(getName());
        music.setUsername(getUsername());
        music.setTypeUser(getTypeUser());
        
        music.init();
        this.dispose();
    }//GEN-LAST:event_diaNhacBtActionPerformed

    private void dangXuatBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dangXuatBtActionPerformed
        // TODO add your handling code here:
        new LoginView();
        con.closeConnectDB();
        this.dispose();
    }//GEN-LAST:event_dangXuatBtActionPerformed

    private void timKiemTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timKiemTFKeyReleased
        // TODO add your handling code here:
        timKiem();
    }//GEN-LAST:event_timKiemTFKeyReleased

    private void choseComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choseComboBoxActionPerformed
        // TODO add your handling code here:
        String getText = timKiemTF.getText();
        if (choseComboBox.getSelectedIndex() == 0) {
            tableBook(getText);
        } else if (choseComboBox.getSelectedIndex() == 1) {
            tableMovie(getText);
        } else if (choseComboBox.getSelectedIndex() == 2) {
            tableMusic(getText);
        } else {
            tableChiPhi(getText);
        }
    }//GEN-LAST:event_choseComboBoxActionPerformed

    private void chiPhiBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chiPhiBtActionPerformed
        // TODO add your handling code here:
        InputCostView cost = new InputCostView();
        
        cost.setName(getName());
        cost.setUsername(getUsername());
        cost.setTypeUser(getTypeUser());
        
        cost.init();
        this.dispose();
    }//GEN-LAST:event_chiPhiBtActionPerformed
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                    
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellProductsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellProductsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellProductsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellProductsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WarehouseView().setVisible(true);
            }
        });
    }
    
    CreateConnectionDB con = new CreateConnectionDB();
    EmployeeWarehouse empWH = new EmployeeWarehouse();
    SetDataToObject setData = new SetDataToObject();
    //
    DefaultTableModel tableModelBook = new DefaultTableModel();
    String[] colsNameBook = {"Mã", "Tên SP", "Tác giả", "Thể loại", "NXB", "Giá nhập", "Giá bán", "SL"};
    List<Book> bookList = new ArrayList<Book>();
    //
    DefaultTableModel tableModelMovie = new DefaultTableModel();
    String[] colsNameMovie = {"Mã", "Tên SP", "Đạo diễn", "Thể loại", "NSX", "Giá nhập", "Giá bán", "SL"};
    List<Movie> movieList = new ArrayList<Movie>();
    //
    DefaultTableModel tableModelMusic = new DefaultTableModel();
    String[] colsNameMusic = {"Mã", "Tên SP", "Ca sĩ", "Thể loại", "NSX", "Giá nhập", "Giá bán", "SL"};
    List<Music> musicList = new ArrayList<Music>();
    
    DefaultTableModel tableModelChiPhi = new DefaultTableModel();
    String[] colsNameChiPhi = {"Mã CP", "Tên CP", "Loại CP", "Ngày PS", "Số tiền", "Ghi chú"};
    List<Cost> chiPhiList = new ArrayList<Cost>();

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableProduct;
    private javax.swing.JButton chiPhiBt;
    private javax.swing.JComboBox<String> choseComboBox;
    private javax.swing.JButton dangXuatBt;
    private javax.swing.JButton diaNhacBt;
    private javax.swing.JButton diaPhimBt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton sachBt;
    private javax.swing.JTextField timKiemTF;
    // End of variables declaration//GEN-END:variables
}
